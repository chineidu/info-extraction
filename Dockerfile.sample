# Base image
FROM python:3.10.8 as base
# install gcc
RUN apt-get update \
	&& apt-get -y install gcc \
	&& rm -rf /var/lib/apt/lists/*

# DEVELOPMENT
FROM base as development
ENV \
	PIP_NO_CACHE_DIR=off \
	PIP_DISABLE_PIP_VERSION_CHECK=on \
	PYTHONDONTWRITEBYTECODE=1 \
	PYTHONUNBUFFERED=1 \
	VIRTUAL_ENV=/api-venv
ENV \
	POETRY_VIRTUALENVS_CREATE=false \
	POETRY_VIRTUALENVS_IN_PROJECT=false \
	POETRY_NO_INTERACTION=1 \
	POETRY_VERSION=1.4.2

# Install poetry
RUN pip install "poetry==$POETRY_VERSION"
# Copy requirements
COPY poetry.lock pyproject.toml ./

# add venv to path
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Install python packages
RUN python -m venv $VIRTUAL_ENV \
	&& . $VIRTUAL_ENV/bin/activate \
	&& poetry install --no-root

# BUILDER
FROM development as builder
WORKDIR /app
COPY . .
RUN poetry install --without dev
# export build
RUN poetry build --format wheel

# PRODUCTION
FROM base as production
WORKDIR /app
COPY --from=builder /app/dist/*.whl ./
RUN pip install ./*.whl
RUN rm ./*.whl

# Entry point
# CMD ["poetry", "run", "python3", "api/app.py", "--host", "0.0.0.0"]
CMD ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8005"]


# ======
FROM python:3.10.8-bullseye

WORKDIR /opt

RUN apt-get update && apt-get upgrade -y
RUN pip install --no-cache -U pip
RUN pip install poetry==1.4.2

# First copy & install requirements to speed up the build process in case only the code changes.
COPY ["./pyproject.toml", "./poetry.lock", "README.md", "./"]

# Disable virtual environment creation
RUN poetry install --no-interaction --no-root -vvv

# Copy the rest of the files.
ADD ["./", "./"]


# CMD ["uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8005"]
CMD ["poetry", "run", "uvicorn", "api.app:app", "--host", "0.0.0.0", "--port", "8005"]
